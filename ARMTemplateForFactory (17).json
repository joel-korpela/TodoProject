{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "factoryName": {
            "type": "string",
            "metadata": "Data Factory name",
            "defaultValue": "test-hcintegration-adf"
        },
        "MepcoSFTP_passPhrase": {
            "type": "secureString",
            "metadata": "Secure string for 'passPhrase' of 'MepcoSFTP'"
        },
        "Tampuuri_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'Tampuuri'",
            "defaultValue": "Integrated Security=False;Data Source=62.121.49.105;Initial Catalog=Tampuuri_DW56;User ID=Tampuuri_DW_HolidayClub_app"
        },
        "TampuuriReportingDb_connectionString": {
            "type": "secureString",
            "metadata": "Secure string for 'connectionString' of 'TampuuriReportingDb'",
            "defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=test-hcdpreporting.database.windows.net;Initial Catalog=tampuuri"
        },
        "AzureDataLakeStorage1_properties_typeProperties_url": {
            "type": "string",
            "defaultValue": "https://testhcintegrationdls.dfs.core.windows.net"
        },
        "HCRBizTalk_properties_typeProperties_host": {
            "type": "string",
            "defaultValue": "@{concat('\\\\hcr-biztalk-pro.hcr.local\\', linkedService().folder)}"
        },
        "HCRBizTalk_properties_typeProperties_userId": {
            "type": "string",
            "defaultValue": "hcr\\service.datapf.test"
        },
        "HausviseSFTP_properties_typeProperties_host": {
            "type": "string",
            "defaultValue": "sftp.hausvise.fi"
        },
        "HausviseSFTP_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "hvsftp.holidayclub"
        },
        "Hausvise_Database_properties_typeProperties_server": {
            "type": "string",
            "defaultValue": "@{linkedService().Server}"
        },
        "Hausvise_Database_properties_typeProperties_database": {
            "type": "string",
            "defaultValue": "@{linkedService().Database}"
        },
        "Hausvise_Database_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "@{linkedService().UserName}"
        },
        "IntegrationKeyVault_properties_typeProperties_baseUrl": {
            "type": "string",
            "defaultValue": "https://test-hcintegration-kv.vault.azure.net/"
        },
        "MepcoSFTP_properties_typeProperties_host": {
            "type": "string",
            "defaultValue": "transfer.mepco.fi"
        },
        "MepcoSFTP_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "mep0021201"
        },
        "OpusCapita_properties_typeProperties_host": {
            "type": "string",
            "defaultValue": "cashsftp1.nomentia.com"
        },
        "OpusCapita_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "cm-p-234330"
        },
        "SiriusSftp_properties_typeProperties_host": {
            "type": "string",
            "defaultValue": "213.138.137.139"
        },
        "SiriusSftp_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "sftp-holidayclub"
        },
        "SpiDbTest_properties_typeProperties_server": {
            "type": "string",
            "defaultValue": "FIHEL-SPI-50.hcr.local"
        },
        "SpiDbTest_properties_typeProperties_database": {
            "type": "string",
            "defaultValue": "Integration"
        },
        "SpiDbTest_properties_typeProperties_userName": {
            "type": "string",
            "defaultValue": "HCR\\service.datapf.test"
        },
        "hcintegrations_fa_storage_properties_typeProperties_serviceEndpoint": {
            "type": "string",
            "defaultValue": "@{linkedService().StorageUrl}"
        },
        "TriggerHCRBizTalk10MinInterval_properties_CopyAllFilesFromMepcoToHCRBizTalk_parameters_inputParam": {
            "type": "array",
            "defaultValue": [
                {
                    "sourceDirectory": "out/kirjanpito",
                    "sourceFileMask": "01*",
                    "targetDirectory": "Kirjanpidon siirrot/HCR kk-palkat",
                    "backupDirectory": "kirjanpito"
                },
                {
                    "sourceDirectory": "out/kirjanpito",
                    "sourceFileMask": "02*",
                    "targetDirectory": "Kirjanpidon siirrot/HCR provisiopalkat",
                    "backupDirectory": "kirjanpito"
                },
                {
                    "sourceDirectory": "out/kirjanpito",
                    "sourceFileMask": "03*",
                    "targetDirectory": "Kirjanpidon siirrot/HCR tuntipalkat",
                    "backupDirectory": "kirjanpito"
                },
                {
                    "sourceDirectory": "out/kirjanpito",
                    "sourceFileMask": "04*",
                    "targetDirectory": "Kirjanpidon siirrot/Katin Golf",
                    "backupDirectory": "kirjanpito"
                },
                {
                    "sourceDirectory": "out/kirjanpito",
                    "sourceFileMask": "05*",
                    "targetDirectory": "Kirjanpidon siirrot/Katinkulta Golf",
                    "backupDirectory": "kirjanpito"
                },
                {
                    "sourceDirectory": "out/kirjanpito",
                    "sourceFileMask": "06*",
                    "targetDirectory": "Kirjanpidon siirrot/Kylpylät kk-palkat",
                    "backupDirectory": "kirjanpito"
                },
                {
                    "sourceDirectory": "out/kirjanpito",
                    "sourceFileMask": "07*",
                    "targetDirectory": "Kirjanpidon siirrot/Kylpylät tuntipalkat",
                    "backupDirectory": "kirjanpito"
                },
                {
                    "sourceDirectory": "out/kirjanpito",
                    "sourceFileMask": "08*",
                    "targetDirectory": "Kirjanpidon siirrot/Palkkiot",
                    "backupDirectory": "kirjanpito"
                },
                {
                    "sourceDirectory": "out/kirjanpito",
                    "sourceFileMask": "09*",
                    "targetDirectory": "Kiinteistöyhtiöt",
                    "backupDirectory": "kirjanpito"
                },
                {
                    "sourceDirectory": "out/pankki",
                    "sourceFileMask": "Koyp*.*",
                    "targetDirectory": "M2 Tampuuri",
                    "backupDirectory": "pankki"
                }
            ]
        },
        "TriggerHCRBizTalk10MinInterval_properties_CopyAllFilesFromMepcoToHCRBizTalk_parameters_deleteConfig": {
            "type": "object",
            "defaultValue": {
                "deleteEnabled": true,
                "sourceDirectory": "out/kirjanpito",
                "sourceFileMask": "*erittely.pdf"
            }
        },
        "TriggerOpusCapita10MinInterval_properties_CopyAllFilesFromMepcoToOpusCapita_parameters_inputParam": {
            "type": "array",
            "defaultValue": [
                {
                    "sourceDirectory": "out/pankki",
                    "sourceFileMask": "Ay-tilitys*.*",
                    "backupDirectory": "pankki"
                },
                {
                    "sourceDirectory": "out/pankki",
                    "sourceFileMask": "Pankki*.*",
                    "backupDirectory": "pankki"
                },
                {
                    "sourceDirectory": "out/pankki",
                    "sourceFileMask": "Ulosotto*.*",
                    "backupDirectory": "pankki"
                }
            ]
        },
        "TriggerSiriusEveryDayAt0200_properties_CopyAllFilesFromMepcoToSirius_parameters_inputParam": {
            "type": "array",
            "defaultValue": [
                {
                    "sourceDirectory": "out/sirius",
                    "sourceFileMask": "*_Sirius.csv",
                    "backupDirectory": "sirius"
                }
            ]
        },
        "shared-dataplatformir_properties_typeProperties_linkedInfo_resourceId": {
            "type": "string",
            "defaultValue": "/subscriptions/5cf78a63-7819-45a5-afe1-21399c481b38/resourcegroups/test-hcdpdatapipelines/providers/Microsoft.DataFactory/factories/test-hcdpdataFactory/integrationruntimes/dataplatformir"
        }
    },
    "variables": {
        "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
    },
    "resources": [
        {
            "name": "[concat(parameters('factoryName'), '/ConvertToHausviseFormat')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Convert To Hausvise-format",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "ForEach Row",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json"
                            },
                            "url": {
                                "value": "@pipeline().parameters.url",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "@concat('{\n    \"Filename\": \"', \n    pipeline().parameters.filename, \n    '\", \"FileContent\": [', \n    join(variables('rows'), ','), \n    ']}')",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "ForEach Row",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Initialize Rows",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.rawrows",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Append data row",
                                    "type": "AppendVariable",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "rows",
                                        "value": {
                                            "value": "@concat('\"', item()['Prop_0'], '\"')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Initialize Rows",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Log to LAWS_copy1",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "rows",
                            "value": []
                        }
                    },
                    {
                        "name": "Log to LAWS_copy1",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "LogToLaws",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {
                                "url": {
                                    "value": "@pipeline().parameters.logAnalyticsUrl",
                                    "type": "Expression"
                                },
                                "message": {
                                    "value": "@concat(\n    '{\n        \"Message\": \"Converting to Hausvise format from ', pipeline().parameters.conversion,'\",',\n        '\"Source\": \"', pipeline().parameters.filename,'\",',\n        '\"Target\": \"\",', \n        '\"Integration\": \"Mepco\",',\n        '\"Environment\": \"', pipeline().globalParameters.environment, '\"',\n'}'\n)",
                                    "type": "Expression"
                                },
                                "authorizationKey": {
                                    "value": "@pipeline().parameters.logAnalyticsKey",
                                    "type": "Expression"
                                }
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "rawrows": {
                        "type": "array"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "logAnalyticsKey": {
                        "type": "string"
                    },
                    "conversion": {
                        "type": "string"
                    },
                    "logAnalyticsUrl": {
                        "type": "string"
                    }
                },
                "variables": {
                    "rows": {
                        "type": "Array"
                    },
                    "tempPath": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "HCRBizTalkToHausvise"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/LogToLaws')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/CopyAllFilesFromMepcoToHCRBizTalk')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEachConfigItem",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "If Delete enabled",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.inputParam",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Log to LAWS",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "LogToLaws",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "url": {
                                                "value": "@activity('Get LWAS logic app url').output.value",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(\n'{\n   \"Message\": \"Starting to copy files from Mepco to HCRBizTalk with mask: ', item().sourceFileMask, '\",',\n   '\"Source\": \"', item().sourceDirectory, '\",',\n   '\"Target\": \"', item().targetDirectory, '\",',\n   '\"Integration\": \"Mepco\",',\n   '\"Environment\": \"',\n   pipeline().globalParameters.environment,\n'\"}'\n)",
                                                "type": "Expression"
                                            },
                                            "authorizationKey": {
                                                "value": "@activity('Get Secret to write Log Analytics').output.value",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Switch1",
                                    "type": "Switch",
                                    "dependsOn": [
                                        {
                                            "activity": "Log to LAWS",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@toLower(pipeline().globalParameters.environment)",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "test",
                                                "activities": [
                                                    {
                                                        "name": "Execute Copy Pipeline",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Filter only files",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "CopyAndBackupFromMepcoToHCRBizTalk",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "inputfiles": {
                                                                    "value": "@activity('Filter only files').output.Value",
                                                                    "type": "Expression"
                                                                },
                                                                "configObject": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "paymementGroups": {
                                                                    "value": "@activity('Fetch Hausvise Mappings').output.value",
                                                                    "type": "Expression"
                                                                },
                                                                "LAWSLogicAppUrl": {
                                                                    "value": "@activity('Get LWAS logic app url').output.value",
                                                                    "type": "Expression"
                                                                },
                                                                "LAWSAuthKey": {
                                                                    "value": "@activity('Get Secret to write Log Analytics').output.value",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "Filter only files",
                                                        "type": "Filter",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Get Files Metadata",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "items": {
                                                                "value": "@activity('Get Files Metadata').output.childItems",
                                                                "type": "Expression"
                                                            },
                                                            "condition": {
                                                                "value": "@equals(item().type, 'File')",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "Get Files Metadata",
                                                        "type": "GetMetadata",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "dataset": {
                                                                "referenceName": "ds_hcr_biztalk",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "directory": {
                                                                        "value": "@item().sourceDirectory",
                                                                        "type": "Expression"
                                                                    },
                                                                    "file": {
                                                                        "value": "@item().sourceFileMask",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            },
                                                            "fieldList": [
                                                                "childItems"
                                                            ],
                                                            "storeSettings": {
                                                                "type": "FileServerReadSettings",
                                                                "recursive": true,
                                                                "enablePartitionDiscovery": false
                                                            },
                                                            "formatSettings": {
                                                                "type": "BinaryReadSettings"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "prod",
                                                "activities": [
                                                    {
                                                        "name": "Get Files Metadata from Mepco",
                                                        "type": "GetMetadata",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "dataset": {
                                                                "referenceName": "ds_sftp_mepco",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "file": {
                                                                        "value": "@item().sourceFileMask",
                                                                        "type": "Expression"
                                                                    },
                                                                    "directory": {
                                                                        "value": "@item().sourceDirectory",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            },
                                                            "fieldList": [
                                                                "childItems"
                                                            ],
                                                            "storeSettings": {
                                                                "type": "SftpReadSettings",
                                                                "recursive": true,
                                                                "enablePartitionDiscovery": false,
                                                                "disableChunking": false
                                                            },
                                                            "formatSettings": {
                                                                "type": "BinaryReadSettings"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "Execute Copy Pipeline_copy1",
                                                        "type": "ExecutePipeline",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Filter only files_copy1",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "pipeline": {
                                                                "referenceName": "CopyAndBackupFromMepcoToHCRBizTalk",
                                                                "type": "PipelineReference"
                                                            },
                                                            "waitOnCompletion": true,
                                                            "parameters": {
                                                                "inputfiles": {
                                                                    "value": "@activity('Filter only files_copy1').output.Value",
                                                                    "type": "Expression"
                                                                },
                                                                "configObject": {
                                                                    "value": "@item()",
                                                                    "type": "Expression"
                                                                },
                                                                "paymementGroups": {
                                                                    "value": "@activity('Fetch Hausvise Mappings').output.value",
                                                                    "type": "Expression"
                                                                },
                                                                "LAWSLogicAppUrl": {
                                                                    "value": "@activity('Get LWAS logic app url').output.value",
                                                                    "type": "Expression"
                                                                },
                                                                "LAWSAuthKey": {
                                                                    "value": "@activity('Get Secret to write Log Analytics').output.value",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "Filter only files_copy1",
                                                        "type": "Filter",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "Get Files Metadata from Mepco",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "items": {
                                                                "value": "@activity('Get Files Metadata from Mepco').output.childItems",
                                                                "type": "Expression"
                                                            },
                                                            "condition": {
                                                                "value": "@equals(item().type, 'File')",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "If Delete enabled",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Fetch Hausvise Mappings",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@and(\n    pipeline().parameters.deleteConfig.deleteEnabled,\n    equals(pipeline().globalParameters.environment, 'prod')\n)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Delete erittelyt",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_sftp_mepco",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": "*",
                                                "directory": {
                                                    "value": "@pipeline().parameters.deleteConfig.sourceDirectory",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "SftpReadSettings",
                                            "maxConcurrentConnections": 1,
                                            "recursive": false,
                                            "wildcardFileName": {
                                                "value": "@{pipeline().parameters.deleteConfig.sourceFileMask}",
                                                "type": "Expression"
                                            },
                                            "enablePartitionDiscovery": false,
                                            "disableChunking": false
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Fetch Hausvise Mappings",
                        "type": "Lookup",
                        "dependsOn": [
                            {
                                "activity": "Get Secret to write Log Analytics",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "Hausvise_Mapping",
                                "type": "DatasetReference",
                                "parameters": {
                                    "Server": {
                                        "value": "@pipeline().globalParameters.Hausvise_Database_Server",
                                        "type": "Expression"
                                    },
                                    "Database": {
                                        "value": "@pipeline().globalParameters.Hausvise_Database_Table",
                                        "type": "Expression"
                                    },
                                    "UserName": {
                                        "value": "@pipeline().globalParameters.Hausvise_Database_Username",
                                        "type": "Expression"
                                    },
                                    "UserPasswordSecret": {
                                        "value": "@pipeline().globalParameters.Hausvise_Database_Password_secret",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "firstRowOnly": false
                        }
                    },
                    {
                        "name": "Get Secret to write Log Analytics",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Get LWAS logic app url",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(\n    'https://', \n    pipeline().globalParameters.environment,\n    '-hcintegration-kv.vault.azure.net/secrets/',\n    'LAWS-hcintegrations-key',\n    '?api-version=7.0'\n)",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get LWAS logic app url",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(\n    'https://', \n    pipeline().globalParameters.environment,\n    '-hcintegration-kv.vault.azure.net/secrets/',\n    'LAWS-logicapp-url',\n    '?api-version=7.0'\n)",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "inputParam": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "sourceDirectory": "out/kirjanpito",
                                "sourceFileMask": "01*",
                                "targetDirectory": "Kirjanpidon siirrot/HCR kk-palkat",
                                "backupDirectory": "kirjanpito"
                            },
                            {
                                "sourceDirectory": "out/kirjanpito",
                                "sourceFileMask": "02*",
                                "targetDirectory": "Kirjanpidon siirrot/HCR provisiopalkat",
                                "backupDirectory": "kirjanpito"
                            },
                            {
                                "sourceDirectory": "out/kirjanpito",
                                "sourceFileMask": "03*",
                                "targetDirectory": "Kirjanpidon siirrot/HCR tuntipalkat",
                                "backupDirectory": "kirjanpito"
                            },
                            {
                                "sourceDirectory": "out/kirjanpito",
                                "sourceFileMask": "04*",
                                "targetDirectory": "Kirjanpidon siirrot/Katin Golf",
                                "backupDirectory": "kirjanpito"
                            },
                            {
                                "sourceDirectory": "out/kirjanpito",
                                "sourceFileMask": "05*",
                                "targetDirectory": "Kirjanpidon siirrot/Katinkulta Golf",
                                "backupDirectory": "kirjanpito"
                            },
                            {
                                "sourceDirectory": "out/kirjanpito",
                                "sourceFileMask": "06*",
                                "targetDirectory": "Kirjanpidon siirrot/Kylpylät kk-palkat",
                                "backupDirectory": "kirjanpito"
                            },
                            {
                                "sourceDirectory": "out/kirjanpito",
                                "sourceFileMask": "07*",
                                "targetDirectory": "Kirjanpidon siirrot/Kylpylät tuntipalkat",
                                "backupDirectory": "kirjanpito"
                            },
                            {
                                "sourceDirectory": "out/kirjanpito",
                                "sourceFileMask": "08*",
                                "targetDirectory": "Kirjanpidon siirrot/Palkkiot",
                                "backupDirectory": "kirjanpito"
                            },
                            {
                                "sourceDirectory": "out/kirjanpito",
                                "sourceFileMask": "09*",
                                "targetDirectory": "Kiinteistöyhtiöt",
                                "backupDirectory": "kirjanpito"
                            },
                            {
                                "sourceDirectory": "out/pankki",
                                "sourceFileMask": "Koyp*.*",
                                "targetDirectory": "M2 Tampuuri",
                                "backupDirectory": "pankki"
                            }
                        ]
                    },
                    "deleteConfig": {
                        "type": "object",
                        "defaultValue": {
                            "deleteEnabled": true,
                            "sourceDirectory": "out/kirjanpito",
                            "sourceFileMask": "*erittely.pdf"
                        }
                    }
                },
                "variables": {
                    "Filename": {
                        "type": "String"
                    },
                    "FileParts": {
                        "type": "Array"
                    },
                    "temp": {
                        "type": "String"
                    },
                    "MiddleFilePart": {
                        "type": "String"
                    },
                    "tempPath": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "MepcoToHCRBizTalk"
                },
                "annotations": [],
                "lastPublishTime": "2022-10-18T07:42:51Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/Hausvise_Mapping')]",
                "[concat(variables('factoryId'), '/pipelines/LogToLaws')]",
                "[concat(variables('factoryId'), '/datasets/ds_sftp_mepco')]",
                "[concat(variables('factoryId'), '/pipelines/CopyAndBackupFromMepcoToHCRBizTalk')]",
                "[concat(variables('factoryId'), '/datasets/ds_hcr_biztalk')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/CopyAllFilesFromMepcoToOpusCapita')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEachConfigItem",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.inputParam",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "Get Files Metadata",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_sftp_mepco",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": {
                                                    "value": "@item().sourceFileMask",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@item().sourceDirectory",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "childItems"
                                        ],
                                        "storeSettings": {
                                            "type": "SftpReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false,
                                            "disableChunking": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "Execute Copy Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Filter only files",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "CopyAndBackupFromMepcoToOpusCapita",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "inputfiles": {
                                                "value": "@activity('Filter only files').output.Value",
                                                "type": "Expression"
                                            },
                                            "configObject": {
                                                "value": "@item()",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Filter only files",
                                    "type": "Filter",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Files Metadata",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "items": {
                                            "value": "@activity('Get Files Metadata').output.childItems",
                                            "type": "Expression"
                                        },
                                        "condition": {
                                            "value": "@equals(item().type, 'File')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "inputParam": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "sourceDirectory": "out/pankki",
                                "sourceFileMask": "Ay-tilitys*.*",
                                "backupDirectory": "pankki"
                            },
                            {
                                "sourceDirectory": "out/pankki",
                                "sourceFileMask": "Pankki*.*",
                                "backupDirectory": "pankki"
                            },
                            {
                                "sourceDirectory": "out/pankki",
                                "sourceFileMask": "Ulosotto*.*",
                                "backupDirectory": "pankki"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "MepcoToOpusCapita"
                },
                "annotations": [],
                "lastPublishTime": "2022-10-18T06:24:08Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ds_sftp_mepco')]",
                "[concat(variables('factoryId'), '/pipelines/CopyAndBackupFromMepcoToOpusCapita')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/CopyAllFilesFromMepcoToSirius')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEachConfigItem",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.inputParam",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Get Files Metadata",
                                    "type": "GetMetadata",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_sftp_mepco",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": {
                                                    "value": "@item().sourceFileMask",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@item().sourceDirectory",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "fieldList": [
                                            "childItems"
                                        ],
                                        "storeSettings": {
                                            "type": "SftpReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false,
                                            "disableChunking": false
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    }
                                },
                                {
                                    "name": "Execute Copy Pipeline",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Filter only files",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "CopyAndBackupFromMepcoToSirius",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "inputfiles": {
                                                "value": "@activity('Filter only files').output.Value",
                                                "type": "Expression"
                                            },
                                            "configObject": {
                                                "value": "@item()",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                },
                                {
                                    "name": "Filter only files",
                                    "type": "Filter",
                                    "dependsOn": [
                                        {
                                            "activity": "Get Files Metadata",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "items": {
                                            "value": "@activity('Get Files Metadata').output.childItems",
                                            "type": "Expression"
                                        },
                                        "condition": {
                                            "value": "@equals(item().type, 'File')",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "inputParam": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "sourceDirectory": "out/sirius",
                                "sourceFileMask": "*_Sirius.csv",
                                "backupDirectory": "sirius"
                            }
                        ]
                    }
                },
                "folder": {
                    "name": "MepcoToSirius"
                },
                "annotations": [],
                "lastPublishTime": "2022-10-18T06:24:08Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ds_sftp_mepco')]",
                "[concat(variables('factoryId'), '/pipelines/CopyAndBackupFromMepcoToSirius')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/CopyAllTablesFromTampuuriToSqlDatabase')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "For Each Tampuuri Table",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get table information from Azure SQL",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get table information from Azure SQL').output.value",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "Truncate and Copy from Tampuuri to Azure SQL in IF",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "SqlServerSource",
                                            "sqlReaderQuery": {
                                                "value": "@concat('select * from ',item().table_schema, '.[', item().table_name, ']')",
                                                "type": "Expression"
                                            },
                                            "queryTimeout": "02:00:00",
                                            "partitionOption": "None"
                                        },
                                        "sink": {
                                            "type": "AzureSqlSink",
                                            "preCopyScript": {
                                                "value": "@{concat('IF OBJECT_ID(N''',item().table_schema,'.[',item().table_name, ']', ''', N''U'') IS NOT NULL TRUNCATE TABLE ', item().table_schema,'.[', item().table_name, ']')}",
                                                "type": "Expression"
                                            },
                                            "writeBehavior": "insert",
                                            "sqlWriterUseTableLock": false,
                                            "tableOption": "autoCreate",
                                            "disableMetricsCollection": false
                                        },
                                        "enableStaging": false,
                                        "translator": {
                                            "type": "TabularTranslator",
                                            "typeConversion": true,
                                            "typeConversionSettings": {
                                                "allowDataTruncation": true,
                                                "treatBooleanAsNumber": false
                                            }
                                        }
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "TampuuriTables",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "table_name": {
                                                    "value": "@item().table_name",
                                                    "type": "Expression"
                                                },
                                                "table_schema": {
                                                    "value": "@item().table_schema",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "TampuuriDataStore",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "table_schema": {
                                                    "value": "@item().table_schema",
                                                    "type": "Expression"
                                                },
                                                "table_name": {
                                                    "value": "@item().table_name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get table information from Azure SQL",
                        "type": "Lookup",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "AzureSqlSource",
                                "sqlReaderQuery": "SELECT * FROM dbo.ImportDataSchema",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "dataset": {
                                "referenceName": "TampuuriSchemaStore",
                                "type": "DatasetReference",
                                "parameters": {
                                    "table_name": "ImportDataSchema",
                                    "schema_name": "dbo"
                                }
                            },
                            "firstRowOnly": false
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "TampuuriToSqlDatabase"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/TampuuriSchemaStore')]",
                "[concat(variables('factoryId'), '/datasets/TampuuriTables')]",
                "[concat(variables('factoryId'), '/datasets/TampuuriDataStore')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/CopyAndBackupFromMepcoToHCRBizTalk')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEachFile",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.inputfiles",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Should send to Hausvise",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Filter Hausvise -paymentGroups",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@greater(length(activity('Filter Hausvise -paymentGroups').output.value), 0)",
                                            "type": "Expression"
                                        },
                                        "ifFalseActivities": [
                                            {
                                                "name": "Set to old path",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "targetPath",
                                                    "value": {
                                                        "value": "@pipeline().parameters.configObject.targetDirectory",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Set variable1",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Set to old path",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "SendingToHousvise",
                                                    "value": false
                                                }
                                            }
                                        ],
                                        "ifTrueActivities": [
                                            {
                                                "name": "Set target to Hausvise-folder",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Create Target Path",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "targetPath",
                                                    "value": {
                                                        "value": "@concat(\n    pipeline().parameters.configObject.targetDirectory, \n    variables('tempPath')\n)",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Set sending to Hausvise",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Set target to Hausvise-folder",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "SendingToHousvise",
                                                    "value": true
                                                }
                                            },
                                            {
                                                "name": "Create Target Path",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "tempPath",
                                                    "value": {
                                                        "value": "@if(\n        endswith(toLower(variables('Filename')), '.pdf'),\n        '/Hausvise_processing/pdf',\n        '/Hausvise_processing'\n)",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Filter Hausvise -paymentGroups",
                                    "type": "Filter",
                                    "dependsOn": [
                                        {
                                            "activity": "Set Default New Filename",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "items": {
                                            "value": "@pipeline().parameters.paymementGroups",
                                            "type": "Expression"
                                        },
                                        "condition": {
                                            "value": "@and(\n    contains(variables('Filename'), item().PaymentGroup),\n    or(\n        startswith(pipeline().parameters.configObject.sourceFileMask, '09'),\n        startswith(pipeline().parameters.configObject.sourceFileMask, 'Koyp')\n    )\n)",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Set Original Filename",
                                    "type": "SetVariable",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "Filename",
                                        "value": {
                                            "value": "@item().name",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Create New Filename If Sending to Hausvise",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Should send to Hausvise",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(\n    variables('SendingToHousvise'),\n    or(\n        endswith(toLower(variables('Filename')), '.pdf'),\n        or(\n            endswith(toLower(variables('Filename')), '.dat'),\n            or(\n                endswith(toLower(variables('Filename')), '.xml'),\n                less(indexOf(variables('Filename'), '.'), 0)\n            )\n        )\n    )\n)",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Set New Filename",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Take Second Part",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "NewFilename",
                                                    "value": {
                                                        "value": "@concat(\n    activity('Filter Hausvise -paymentGroups').output.value[0].CompanyId,\n    '_',\n    activity('Filter Hausvise -paymentGroups').output.value[0].Bank,\n    '_',\n    if(greaterOrEquals(length(variables('FileParts')), 3),\n        concat('Koyp_', variables('MiddleFilePart'), '_'),\n        'Koyp_'\n    ),    \n    formatDateTime(utcNow(), 'yyyy-MM-ddTHH-mm-ssZ'),\n    if(\n        endswith(variables('Filename'), '.pdf'), \n        '.pdf', \n        if(\n            endswith(variables('Filename'), '.xml'), \n            '.xml',\n            '.dat'\n        )\n    )\n)",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Split Name to Parts",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "FileParts",
                                                    "value": {
                                                        "value": "@split(variables('Filename'), '_')",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Take Second Part",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Split Name to Parts",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "MiddleFilePart",
                                                    "value": {
                                                        "value": "@variables('FileParts')[1]",
                                                        "type": "Expression"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Set Default New Filename",
                                    "type": "SetVariable",
                                    "dependsOn": [
                                        {
                                            "activity": "Set Original Filename",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "variableName": "NewFilename",
                                        "value": {
                                            "value": "@item().name",
                                            "type": "Expression"
                                        }
                                    }
                                },
                                {
                                    "name": "Switch environment",
                                    "type": "Switch",
                                    "dependsOn": [
                                        {
                                            "activity": "Log to LAWS_copy2",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "on": {
                                            "value": "@pipeline().globalParameters.environment",
                                            "type": "Expression"
                                        },
                                        "cases": [
                                            {
                                                "value": "test",
                                                "activities": [
                                                    {
                                                        "name": "CopyFromMepcoToHCRBizTalk",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "BinarySource",
                                                                "storeSettings": {
                                                                    "type": "FileServerReadSettings",
                                                                    "maxConcurrentConnections": 1,
                                                                    "recursive": false
                                                                },
                                                                "formatSettings": {
                                                                    "type": "BinaryReadSettings"
                                                                }
                                                            },
                                                            "sink": {
                                                                "type": "BinarySink",
                                                                "storeSettings": {
                                                                    "type": "FileServerWriteSettings",
                                                                    "copyBehavior": "FlattenHierarchy"
                                                                }
                                                            },
                                                            "enableStaging": false
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "ds_hcr_biztalk",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "directory": {
                                                                        "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                                        "type": "Expression"
                                                                    },
                                                                    "file": {
                                                                        "value": "@variables('Filename')",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "ds_hcr_biztalk",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "directory": {
                                                                        "value": "@variables('targetPath')",
                                                                        "type": "Expression"
                                                                    },
                                                                    "file": {
                                                                        "value": "@variables('NewFilename')",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "name": "Delete file from source_copy1",
                                                        "type": "Delete",
                                                        "state": "Inactive",
                                                        "onInactiveMarkAs": "Succeeded",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "CopyFromMepcoToHCRBizTalk",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "dataset": {
                                                                "referenceName": "ds_hcr_biztalk",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "directory": {
                                                                        "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                                        "type": "Expression"
                                                                    },
                                                                    "file": {
                                                                        "value": "@variables('Filename')",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            },
                                                            "enableLogging": false,
                                                            "storeSettings": {
                                                                "type": "FileServerReadSettings",
                                                                "recursive": false,
                                                                "enablePartitionDiscovery": false
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "value": "prod",
                                                "activities": [
                                                    {
                                                        "name": "BackupToDataLake",
                                                        "type": "Copy",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "CopyFromMepcoToHCRBizTalk_Orig",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "BinarySource",
                                                                "storeSettings": {
                                                                    "type": "SftpReadSettings",
                                                                    "maxConcurrentConnections": 1,
                                                                    "recursive": false,
                                                                    "deleteFilesAfterCompletion": false,
                                                                    "disableChunking": false
                                                                },
                                                                "formatSettings": {
                                                                    "type": "BinaryReadSettings"
                                                                }
                                                            },
                                                            "sink": {
                                                                "type": "BinarySink",
                                                                "storeSettings": {
                                                                    "type": "AzureBlobFSWriteSettings",
                                                                    "copyBehavior": "FlattenHierarchy"
                                                                }
                                                            },
                                                            "enableStaging": false
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "ds_sftp_mepco",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "file": {
                                                                        "value": "@variables('Filename')",
                                                                        "type": "Expression"
                                                                    },
                                                                    "directory": {
                                                                        "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "ds_data_lake",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "Directory": {
                                                                        "value": "@concat(pipeline().parameters.configObject.backupDirectory, '/', formatDateTime(utcNow(), 'yyyy-MM'))",
                                                                        "type": "Expression"
                                                                    },
                                                                    "FileName": {
                                                                        "value": "@concat(formatDateTime(utcNow(), 'yyyyMMddHHmmss-'), item().name)",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "name": "Delete file from source",
                                                        "type": "Delete",
                                                        "dependsOn": [
                                                            {
                                                                "activity": "BackupToDataLake",
                                                                "dependencyConditions": [
                                                                    "Succeeded"
                                                                ]
                                                            }
                                                        ],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "dataset": {
                                                                "referenceName": "ds_sftp_mepco",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "file": {
                                                                        "value": "@variables('Filename')",
                                                                        "type": "Expression"
                                                                    },
                                                                    "directory": {
                                                                        "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            },
                                                            "enableLogging": false,
                                                            "storeSettings": {
                                                                "type": "SftpReadSettings",
                                                                "recursive": false,
                                                                "enablePartitionDiscovery": false,
                                                                "disableChunking": false
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "name": "CopyFromMepcoToHCRBizTalk_Orig",
                                                        "type": "Copy",
                                                        "dependsOn": [],
                                                        "policy": {
                                                            "timeout": "0.12:00:00",
                                                            "retry": 0,
                                                            "retryIntervalInSeconds": 30,
                                                            "secureOutput": false,
                                                            "secureInput": false
                                                        },
                                                        "userProperties": [],
                                                        "typeProperties": {
                                                            "source": {
                                                                "type": "BinarySource",
                                                                "storeSettings": {
                                                                    "type": "SftpReadSettings",
                                                                    "maxConcurrentConnections": 1,
                                                                    "recursive": false,
                                                                    "deleteFilesAfterCompletion": false,
                                                                    "disableChunking": false
                                                                },
                                                                "formatSettings": {
                                                                    "type": "BinaryReadSettings"
                                                                }
                                                            },
                                                            "sink": {
                                                                "type": "BinarySink",
                                                                "storeSettings": {
                                                                    "type": "FileServerWriteSettings",
                                                                    "copyBehavior": "FlattenHierarchy"
                                                                }
                                                            },
                                                            "enableStaging": false
                                                        },
                                                        "inputs": [
                                                            {
                                                                "referenceName": "ds_sftp_mepco",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "file": {
                                                                        "value": "@variables('Filename')",
                                                                        "type": "Expression"
                                                                    },
                                                                    "directory": {
                                                                        "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ],
                                                        "outputs": [
                                                            {
                                                                "referenceName": "ds_hcr_biztalk",
                                                                "type": "DatasetReference",
                                                                "parameters": {
                                                                    "directory": {
                                                                        "value": "@variables('targetPath')",
                                                                        "type": "Expression"
                                                                    },
                                                                    "file": {
                                                                        "value": "@variables('NewFilename')",
                                                                        "type": "Expression"
                                                                    }
                                                                }
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Log to LAWS_copy2",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [
                                        {
                                            "activity": "Create New Filename If Sending to Hausvise",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "LogToLaws",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "url": {
                                                "value": "@pipeline().parameters.LAWSLogicAppUrl",
                                                "type": "Expression"
                                            },
                                            "message": {
                                                "value": "@concat(\n    '{\n        \"Message\": \"Starting to copy files from Mepco to HCRBizTalk\",',\n        '\"Source\": \"', pipeline().parameters.configObject.sourceDirectory, '/', variables('Filename'),'\",',\n        '\"Target\": \"', variables('targetPath'), '/', variables('NewFilename'), '\",', \n        '\"Integration\": \"Mepco\",',\n        '\"Environment\": \"', pipeline().globalParameters.environment, '\"',\n'}'\n)",
                                                "type": "Expression"
                                            },
                                            "authorizationKey": {
                                                "value": "@pipeline().parameters.LAWSAuthKey",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "inputfiles": {
                        "type": "array"
                    },
                    "configObject": {
                        "type": "object"
                    },
                    "paymementGroups": {
                        "type": "array"
                    },
                    "LAWSLogicAppUrl": {
                        "type": "string"
                    },
                    "LAWSAuthKey": {
                        "type": "string"
                    }
                },
                "variables": {
                    "targetPath": {
                        "type": "String"
                    },
                    "Filename": {
                        "type": "String"
                    },
                    "NewFilename": {
                        "type": "String"
                    },
                    "SendingToHousvise": {
                        "type": "Boolean",
                        "defaultValue": false
                    },
                    "FileParts": {
                        "type": "Array"
                    },
                    "MiddleFilePart": {
                        "type": "String"
                    },
                    "tempPath": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "MepcoToHCRBizTalk"
                },
                "annotations": [],
                "lastPublishTime": "2022-10-17T12:32:53Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/LogToLaws')]",
                "[concat(variables('factoryId'), '/datasets/ds_hcr_biztalk')]",
                "[concat(variables('factoryId'), '/datasets/ds_sftp_mepco')]",
                "[concat(variables('factoryId'), '/datasets/ds_data_lake')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/CopyAndBackupFromMepcoToOpusCapita')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEachFile",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.inputfiles",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "CopyFromMepcoToOpusCapita",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "maxConcurrentConnections": 1,
                                                "recursive": false,
                                                "deleteFilesAfterCompletion": false,
                                                "disableChunking": false
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "SftpWriteSettings",
                                                "copyBehavior": "FlattenHierarchy",
                                                "operationTimeout": "01:00:00",
                                                "useTempFileRename": true
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_sftp_mepco",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_sftp_opus_capita",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "BackupToDataLake",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "CopyFromMepcoToOpusCapita",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "maxConcurrentConnections": 1,
                                                "recursive": false,
                                                "deleteFilesAfterCompletion": false,
                                                "disableChunking": false
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings",
                                                "copyBehavior": "FlattenHierarchy"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_sftp_mepco",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": "@item().name",
                                                "directory": {
                                                    "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_data_lake",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Directory": {
                                                    "value": "@concat(pipeline().parameters.configObject.backupDirectory, '/', formatDateTime(utcNow(), 'yyyy-MM'))",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@concat(formatDateTime(utcNow(), 'yyyyMMddHHmmss-'), item().name)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete file from source",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "BackupToDataLake",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_sftp_mepco",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "SftpReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false,
                                            "disableChunking": false
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "inputfiles": {
                        "type": "array"
                    },
                    "configObject": {
                        "type": "object"
                    }
                },
                "folder": {
                    "name": "MepcoToOpusCapita"
                },
                "annotations": [],
                "lastPublishTime": "2022-10-18T06:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ds_sftp_mepco')]",
                "[concat(variables('factoryId'), '/datasets/ds_sftp_opus_capita')]",
                "[concat(variables('factoryId'), '/datasets/ds_data_lake')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/CopyAndBackupFromMepcoToSirius')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ForEachFile",
                        "type": "ForEach",
                        "dependsOn": [],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.inputfiles",
                                "type": "Expression"
                            },
                            "activities": [
                                {
                                    "name": "CopyAndBackupFromMepcoToSirius",
                                    "type": "Copy",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "maxConcurrentConnections": 1,
                                                "recursive": false,
                                                "deleteFilesAfterCompletion": false,
                                                "disableChunking": false
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "SftpWriteSettings",
                                                "copyBehavior": "FlattenHierarchy",
                                                "operationTimeout": "01:00:00",
                                                "useTempFileRename": true
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_sftp_mepco",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_sftp_sirius",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "BackupToDataLake",
                                    "type": "Copy",
                                    "dependsOn": [
                                        {
                                            "activity": "CopyAndBackupFromMepcoToSirius",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "source": {
                                            "type": "BinarySource",
                                            "storeSettings": {
                                                "type": "SftpReadSettings",
                                                "maxConcurrentConnections": 1,
                                                "recursive": false,
                                                "deleteFilesAfterCompletion": false,
                                                "disableChunking": false
                                            },
                                            "formatSettings": {
                                                "type": "BinaryReadSettings"
                                            }
                                        },
                                        "sink": {
                                            "type": "BinarySink",
                                            "storeSettings": {
                                                "type": "AzureBlobFSWriteSettings",
                                                "copyBehavior": "FlattenHierarchy"
                                            }
                                        },
                                        "enableStaging": false
                                    },
                                    "inputs": [
                                        {
                                            "referenceName": "ds_sftp_mepco",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": "@item().name",
                                                "directory": {
                                                    "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ],
                                    "outputs": [
                                        {
                                            "referenceName": "ds_data_lake",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "Directory": {
                                                    "value": "@concat(pipeline().parameters.configObject.backupDirectory, '/', formatDateTime(utcNow(), 'yyyy-MM'))",
                                                    "type": "Expression"
                                                },
                                                "FileName": {
                                                    "value": "@concat(formatDateTime(utcNow(), 'yyyyMMddHHmmss-'), item().name)",
                                                    "type": "Expression"
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    "name": "Delete file from source",
                                    "type": "Delete",
                                    "dependsOn": [
                                        {
                                            "activity": "BackupToDataLake",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_sftp_mepco",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "file": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                },
                                                "directory": {
                                                    "value": "@pipeline().parameters.configObject.sourceDirectory",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "enableLogging": false,
                                        "storeSettings": {
                                            "type": "SftpReadSettings",
                                            "recursive": false,
                                            "enablePartitionDiscovery": false,
                                            "disableChunking": false
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "inputfiles": {
                        "type": "array"
                    },
                    "configObject": {
                        "type": "object"
                    }
                },
                "folder": {
                    "name": "MepcoToSirius"
                },
                "annotations": [],
                "lastPublishTime": "2022-10-18T06:09:25Z"
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ds_sftp_mepco')]",
                "[concat(variables('factoryId'), '/datasets/ds_sftp_sirius')]",
                "[concat(variables('factoryId'), '/datasets/ds_data_lake')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/CopyTampuuriSchemaToAzureSql')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Copy information schema",
                        "description": "Copies information_schema.tables to Azure SQL",
                        "type": "Copy",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "source": {
                                "type": "SqlServerSource",
                                "queryTimeout": "02:00:00",
                                "partitionOption": "None"
                            },
                            "sink": {
                                "type": "AzureSqlSink",
                                "writeBehavior": "upsert",
                                "upsertSettings": {
                                    "useTempDB": true,
                                    "keys": [
                                        "TABLE_CATALOG",
                                        "TABLE_SCHEMA",
                                        "TABLE_NAME",
                                        "TABLE_TYPE"
                                    ]
                                },
                                "sqlWriterUseTableLock": false,
                                "disableMetricsCollection": false
                            },
                            "enableStaging": false,
                            "translator": {
                                "type": "TabularTranslator",
                                "typeConversion": true,
                                "typeConversionSettings": {
                                    "allowDataTruncation": true,
                                    "treatBooleanAsNumber": false
                                }
                            }
                        },
                        "inputs": [
                            {
                                "referenceName": "TampuuriTables",
                                "type": "DatasetReference",
                                "parameters": {
                                    "table_name": "tables",
                                    "table_schema": "information_schema"
                                }
                            }
                        ],
                        "outputs": [
                            {
                                "referenceName": "TampuuriSchemaStore",
                                "type": "DatasetReference",
                                "parameters": {
                                    "table_name": "ImportDataSchema",
                                    "schema_name": "dbo"
                                }
                            }
                        ]
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "TampuuriToSqlDatabase"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/TampuuriTables')]",
                "[concat(variables('factoryId'), '/datasets/TampuuriSchemaStore')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/HCRBizTalkToHausvise_RunAll')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "ConvertAndTransferEachFolder",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get Secret to write Log Analytics",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@pipeline().parameters.folders",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "batchCount": 2,
                            "activities": [
                                {
                                    "name": "ConvertAndCopyFolder",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "HCRBizTalkToHausvise_RunSingleSource",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "folder": {
                                                "value": "@item().folder",
                                                "type": "Expression"
                                            },
                                            "path": {
                                                "value": "@item().path",
                                                "type": "Expression"
                                            },
                                            "logAnalyticsKey": {
                                                "value": "@activity('Get Secret to write Log Analytics').output.value",
                                                "type": "Expression"
                                            },
                                            "sftpFolder": {
                                                "value": "@item().sftpFolder",
                                                "type": "Expression"
                                            },
                                            "moveToProcessed": {
                                                "value": "@item().moveToProcessed",
                                                "type": "Expression"
                                            },
                                            "logAnalyticsUrl": {
                                                "value": "@activity('Get LAWS logic app url').output.value",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get Secret to write Log Analytics",
                        "type": "WebActivity",
                        "dependsOn": [
                            {
                                "activity": "Get LAWS logic app url",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(\n    'https://', \n    pipeline().globalParameters.environment,\n    '-hcintegration-kv.vault.azure.net/secrets/',\n    'LAWS-hcintegrations-key',\n    '?api-version=7.0'\n)",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Get LAWS logic app url",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(\n    'https://', \n    pipeline().globalParameters.environment,\n    '-hcintegration-kv.vault.azure.net/secrets/',\n    'LAWS-logicapp-url',\n    '?api-version=7.0'\n)",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "folders": {
                        "type": "array",
                        "defaultValue": [
                            {
                                "folder": "Integration",
                                "path": "M2 Tampuuri\\Hausvise_processing",
                                "sftpFolder": "pankki",
                                "moveToProcessed": false
                            },
                            {
                                "folder": "Integration",
                                "path": "Kiinteistöyhtiöt\\Hausvise_processing",
                                "sftpFolder": "kirjanpito",
                                "moveToProcessed": true
                            }
                        ]
                    }
                },
                "variables": {
                    "Url": {
                        "type": "String"
                    },
                    "tempPath": {
                        "type": "String"
                    },
                    "Conversion": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "HCRBizTalkToHausvise"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/HCRBizTalkToHausvise_RunSingleSource')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/HCRBizTalkToHausvise_RunSingleSource')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Converts M2 .dat-files to Hausvise format and send them to Hausvise server with SFTP",
                "activities": [
                    {
                        "name": "Get Files",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "Init Url variable",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "ds_hcr_biztalk_ocTransfer",
                                "type": "DatasetReference",
                                "parameters": {
                                    "path": {
                                        "value": "@pipeline().parameters.path",
                                        "type": "Expression"
                                    },
                                    "file": "*",
                                    "folder": {
                                        "value": "@pipeline().parameters.folder",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "FileServerReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "BinaryReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Convert And Send Each File",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Get only dat and xml files or without extension",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get only dat and xml files or without extension').output.Value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "If Is a non-PDF FIle",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Is Mepco Conversion",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(\n    equals(item().type, 'File'),\n    or(\n        endswith(toLower(item().name), '.dat'),\n        equals(indexOf(item().name, '.'), -1)\n    )\n)",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Get file content",
                                                "type": "Lookup",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "FileServerReadSettings",
                                                            "recursive": true,
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "dataset": {
                                                        "referenceName": "ds_hcr_biztalk_dat",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "filename": {
                                                                "value": "@item().name",
                                                                "type": "Expression"
                                                            },
                                                            "path": {
                                                                "value": "@pipeline().parameters.path",
                                                                "type": "Expression"
                                                            },
                                                            "folder": {
                                                                "value": "@pipeline().parameters.folder",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    },
                                                    "firstRowOnly": false
                                                }
                                            },
                                            {
                                                "name": "Convert and Send file to Hausvise",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Get file content",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "ConvertToHausviseFormat",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "rawrows": {
                                                            "value": "@activity('Get file content').output.value",
                                                            "type": "Expression"
                                                        },
                                                        "filename": {
                                                            "value": "@item().name",
                                                            "type": "Expression"
                                                        },
                                                        "url": {
                                                            "value": "@variables('url')",
                                                            "type": "Expression"
                                                        },
                                                        "logAnalyticsKey": {
                                                            "value": "@pipeline().parameters.logAnalyticsKey",
                                                            "type": "Expression"
                                                        },
                                                        "conversion": {
                                                            "value": "@variables('Conversion')",
                                                            "type": "Expression"
                                                        },
                                                        "logAnalyticsUrl": {
                                                            "value": "@pipeline().parameters.logAnalyticsUrl",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "If Is a XML-FIle",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "If Is a non-PDF FIle",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(\n    equals(item().type, 'File'),\n    or(\n        endswith(toLower(item().name), '.pdf'),\n        endswith(toLower(item().name), '.xml')\n    )\n)",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Copy files to BizTalk",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "FileServerReadSettings",
                                                            "recursive": true,
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "AzureBlobStorageWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "ds_hcr_biztalk_dat",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "filename": {
                                                                "value": "@item().name",
                                                                "type": "Expression"
                                                            },
                                                            "path": {
                                                                "value": "@pipeline().parameters.path",
                                                                "type": "Expression"
                                                            },
                                                            "folder": {
                                                                "value": "@pipeline().parameters.folder",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "hcintegrations_fa_storage",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "path": "converted-files",
                                                            "filename": {
                                                                "value": "@item().name",
                                                                "type": "Expression"
                                                            },
                                                            "storageUrl": {
                                                                "value": "@concat(\n    'https://',\n    pipeline().globalParameters.environment,\n    'hcintegrationfasa.blob.core.windows.net'\n)",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            },
                                            {
                                                "name": "Log to LAWS_copy1",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Copy files to BizTalk",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "LogToLaws",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "url": {
                                                            "value": "@pipeline().parameters.logAnalyticsUrl",
                                                            "type": "Expression"
                                                        },
                                                        "message": {
                                                            "value": "@concat(\n    '{\n        \"Message\": \"File copied\",',\n        '\"Source\": \"', pipeline().parameters.folder,'/',replace(pipeline().parameters.path, '\\', '/'), '/', item().name, '\",',\n        '\"Target\": \"converted-files/', item().name, '\",',        \n        '\"Integration\": \"Mepco\",',\n        '\"Environment\": \"', pipeline().globalParameters.environment, '\"',\n'}'\n)",
                                                            "type": "Expression"
                                                        },
                                                        "authorizationKey": {
                                                            "value": "@pipeline().parameters.logAnalyticsKey",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Is Mepco Conversion",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@not(contains(toLower(item().name), 'm2'))",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Set Url to Mepco",
                                                "type": "SetVariable",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "url",
                                                    "value": {
                                                        "value": "@replace(activity('Get Function app Url').output.value, 'M2ToHausvise', 'MepcoToHausvise')",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Set Conversion to Mepco",
                                                "type": "SetVariable",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Set Url to Mepco",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "variableName": "Conversion",
                                                    "value": "Mepco"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Get Function app Url",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "GET",
                            "headers": {},
                            "url": {
                                "value": "@concat(pipeline().globalParameters.kvUrl, 'secrets/M2-to-Hausvise-fa/?api-version=7.0')",
                                "type": "Expression"
                            },
                            "authentication": {
                                "type": "MSI",
                                "resource": "https://vault.azure.net"
                            }
                        }
                    },
                    {
                        "name": "Init Url variable",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Init Conversion variable",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "url",
                            "value": {
                                "value": "@activity('Get Function app Url').output.value",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Get only dat and xml files or without extension",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "Get Files",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Files').output.childItems",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@and(\n    equals(item().type, 'File'),\n    or(\n        endswith(toLower(item().name), '.dat'),\n        or(\n            endswith(toLower(item().name), '.xml'),        \n            less(indexOf(item().name, '.'), 0)\n        )\n    )\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Does Converted Files exists",
                        "type": "GetMetadata",
                        "dependsOn": [
                            {
                                "activity": "Convert And Send Each File",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "hcintegrations_fa_storage",
                                "type": "DatasetReference",
                                "parameters": {
                                    "path": "converted-files",
                                    "filename": "*",
                                    "storageUrl": {
                                        "value": "@concat(\n    'https://',\n    pipeline().globalParameters.environment,\n    'hcintegrationfasa.blob.core.windows.net'\n)",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "If Exists",
                        "type": "IfCondition",
                        "dependsOn": [
                            {
                                "activity": "Does Converted Files exists",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "expression": {
                                "value": "@greater(length(activity('Does Converted Files exists').output.childItems), 0)",
                                "type": "Expression"
                            },
                            "ifTrueActivities": [
                                {
                                    "name": "Store converted file to BizTalk",
                                    "type": "ExecutePipeline",
                                    "dependsOn": [],
                                    "policy": {
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "pipeline": {
                                            "referenceName": "SendConvertedFilesToHausviseAndBizTalk",
                                            "type": "PipelineReference"
                                        },
                                        "waitOnCompletion": true,
                                        "parameters": {
                                            "path": {
                                                "value": "@pipeline().parameters.path",
                                                "type": "Expression"
                                            },
                                            "logAnalyticsKey": {
                                                "value": "@pipeline().parameters.logAnalyticsKey",
                                                "type": "Expression"
                                            },
                                            "sftpFolder": {
                                                "value": "@pipeline().parameters.sftpFolder",
                                                "type": "Expression"
                                            },
                                            "copyToProcessedFolder": {
                                                "value": "@pipeline().parameters.moveToProcessed",
                                                "type": "Expression"
                                            },
                                            "logAnalyticsUrl": {
                                                "value": "@pipeline().parameters.logAnalyticsUrl",
                                                "type": "Expression"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "Init Conversion variable",
                        "type": "SetVariable",
                        "dependsOn": [
                            {
                                "activity": "Get Function app Url",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "variableName": "Conversion",
                            "value": "M2"
                        }
                    },
                    {
                        "name": "Delete Source Files",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "If Exists",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get only dat and xml files or without extension').output.Value",
                                "type": "Expression"
                            },
                            "isSequential": true,
                            "activities": [
                                {
                                    "name": "Delete File From Processing Folder_copy1",
                                    "type": "Delete",
                                    "dependsOn": [],
                                    "policy": {
                                        "timeout": "0.12:00:00",
                                        "retry": 0,
                                        "retryIntervalInSeconds": 30,
                                        "secureOutput": false,
                                        "secureInput": false
                                    },
                                    "userProperties": [],
                                    "typeProperties": {
                                        "dataset": {
                                            "referenceName": "ds_hcr_biztalk_ocTransfer",
                                            "type": "DatasetReference",
                                            "parameters": {
                                                "path": {
                                                    "value": "@pipeline().parameters.path",
                                                    "type": "Expression"
                                                },
                                                "file": {
                                                    "value": "@item().name",
                                                    "type": "Expression"
                                                },
                                                "folder": {
                                                    "value": "@pipeline().parameters.folder",
                                                    "type": "Expression"
                                                }
                                            }
                                        },
                                        "logStorageSettings": {
                                            "linkedServiceName": {
                                                "referenceName": "hcintegrations_fa_storage",
                                                "type": "LinkedServiceReference",
                                                "parameters": {
                                                    "StorageUrl": {
                                                        "value": "@concat(\n    'https://',\n    pipeline().globalParameters.environment,\n    'hcintegrationfasa.blob.core.windows.net'\n)",
                                                        "type": "Expression"
                                                    }
                                                }
                                            },
                                            "path": "logs"
                                        },
                                        "enableLogging": true,
                                        "storeSettings": {
                                            "type": "FileServerReadSettings",
                                            "recursive": true,
                                            "enablePartitionDiscovery": false
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "folder": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "logAnalyticsKey": {
                        "type": "string"
                    },
                    "sftpFolder": {
                        "type": "string"
                    },
                    "moveToProcessed": {
                        "type": "bool"
                    },
                    "logAnalyticsUrl": {
                        "type": "string"
                    }
                },
                "variables": {
                    "url": {
                        "type": "String"
                    },
                    "tempPath": {
                        "type": "String"
                    },
                    "Conversion": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "HCRBizTalkToHausvise"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/ds_hcr_biztalk_ocTransfer')]",
                "[concat(variables('factoryId'), '/datasets/hcintegrations_fa_storage')]",
                "[concat(variables('factoryId'), '/pipelines/SendConvertedFilesToHausviseAndBizTalk')]",
                "[concat(variables('factoryId'), '/linkedServices/hcintegrations_fa_storage')]",
                "[concat(variables('factoryId'), '/datasets/ds_hcr_biztalk_dat')]",
                "[concat(variables('factoryId'), '/pipelines/ConvertToHausviseFormat')]",
                "[concat(variables('factoryId'), '/pipelines/LogToLaws')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/LogToLaws')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Log to LAWS",
                        "type": "WebActivity",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "method": "POST",
                            "headers": {
                                "Content-Type": "application/json",
                                "x-authorization": {
                                    "value": "@pipeline().parameters.authorizationKey",
                                    "type": "Expression"
                                },
                                "Environment": {
                                    "value": "@pipeline().globalParameters.environment",
                                    "type": "Expression"
                                }
                            },
                            "url": {
                                "value": "@pipeline().parameters.url",
                                "type": "Expression"
                            },
                            "body": {
                                "value": "@pipeline().parameters.message",
                                "type": "Expression"
                            }
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "url": {
                        "type": "string"
                    },
                    "message": {
                        "type": "string"
                    },
                    "authorizationKey": {
                        "type": "string"
                    }
                },
                "annotations": []
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/RefreshSchemasAndCopyData')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "activities": [
                    {
                        "name": "Refresh table schema information",
                        "type": "ExecutePipeline",
                        "dependsOn": [],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "CopyTampuuriSchemaToAzureSql",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    },
                    {
                        "name": "Copy tables based on schema information",
                        "type": "ExecutePipeline",
                        "dependsOn": [
                            {
                                "activity": "Refresh table schema information",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "policy": {
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "pipeline": {
                                "referenceName": "CopyAllTablesFromTampuuriToSqlDatabase",
                                "type": "PipelineReference"
                            },
                            "waitOnCompletion": true,
                            "parameters": {}
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "folder": {
                    "name": "TampuuriToSqlDatabase"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/CopyTampuuriSchemaToAzureSql')]",
                "[concat(variables('factoryId'), '/pipelines/CopyAllTablesFromTampuuriToSqlDatabase')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SendConvertedFilesToHausviseAndBizTalk')]",
            "type": "Microsoft.DataFactory/factories/pipelines",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Copy converted files to BizTalk storage",
                "activities": [
                    {
                        "name": "Get Files",
                        "type": "GetMetadata",
                        "dependsOn": [],
                        "policy": {
                            "timeout": "0.12:00:00",
                            "retry": 0,
                            "retryIntervalInSeconds": 30,
                            "secureOutput": false,
                            "secureInput": false
                        },
                        "userProperties": [],
                        "typeProperties": {
                            "dataset": {
                                "referenceName": "hcintegrations_fa_storage",
                                "type": "DatasetReference",
                                "parameters": {
                                    "path": "converted-files",
                                    "filename": "*",
                                    "storageUrl": {
                                        "value": "@concat(\n    'https://',\n    pipeline().globalParameters.environment,\n    'hcintegrationfasa.blob.core.windows.net'\n)",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "fieldList": [
                                "childItems"
                            ],
                            "storeSettings": {
                                "type": "AzureBlobStorageReadSettings",
                                "recursive": true,
                                "enablePartitionDiscovery": false
                            },
                            "formatSettings": {
                                "type": "DelimitedTextReadSettings"
                            }
                        }
                    },
                    {
                        "name": "Is a File",
                        "type": "Filter",
                        "dependsOn": [
                            {
                                "activity": "Get Files",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Get Files').output.childItems",
                                "type": "Expression"
                            },
                            "condition": {
                                "value": "@and(\n    equals(item().type, 'File'),\n    or(\n        endswith(toLower(item().name), '.dat'),\n        or(\n            endswith(toLower(item().name), '.pdf'),\n            or(\n                endswith(toLower(item().name), '.xml'),\n                less(indexOf(item().name, '.'), 0)\n            )\n        )\n    )\n)",
                                "type": "Expression"
                            }
                        }
                    },
                    {
                        "name": "Send to Hausvise and delete",
                        "type": "ForEach",
                        "dependsOn": [
                            {
                                "activity": "Is a File",
                                "dependencyConditions": [
                                    "Succeeded"
                                ]
                            }
                        ],
                        "userProperties": [],
                        "typeProperties": {
                            "items": {
                                "value": "@activity('Is a File').output.Value",
                                "type": "Expression"
                            },
                            "isSequential": false,
                            "activities": [
                                {
                                    "name": "If Is a File Send To Hausvise",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "Send to Hausvise If in Production",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(item().type, 'File')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Delete File from Function Storage",
                                                "type": "Delete",
                                                "dependsOn": [
                                                    {
                                                        "activity": "Log to LAWS_copy1",
                                                        "dependencyConditions": [
                                                            "Succeeded"
                                                        ]
                                                    }
                                                ],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "dataset": {
                                                        "referenceName": "hcintegrations_fa_storage",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "path": "converted-files",
                                                            "filename": {
                                                                "value": "@item().name",
                                                                "type": "Expression"
                                                            },
                                                            "storageUrl": {
                                                                "value": "@concat(\n    'https://',\n    pipeline().globalParameters.environment,\n    'hcintegrationfasa.blob.core.windows.net'\n)",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    },
                                                    "logStorageSettings": {
                                                        "linkedServiceName": {
                                                            "referenceName": "hcintegrations_fa_storage",
                                                            "type": "LinkedServiceReference",
                                                            "parameters": {
                                                                "StorageUrl": {
                                                                    "value": "@concat(\n    'https://',\n    pipeline().globalParameters.environment,\n    'hcintegrationfasa.blob.core.windows.net'\n)",
                                                                    "type": "Expression"
                                                                }
                                                            }
                                                        },
                                                        "path": "logs/deleted-files"
                                                    },
                                                    "enableLogging": true,
                                                    "storeSettings": {
                                                        "type": "AzureBlobStorageReadSettings",
                                                        "recursive": true,
                                                        "enablePartitionDiscovery": false
                                                    }
                                                }
                                            },
                                            {
                                                "name": "Log to LAWS_copy1",
                                                "type": "ExecutePipeline",
                                                "dependsOn": [],
                                                "policy": {
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "pipeline": {
                                                        "referenceName": "LogToLaws",
                                                        "type": "PipelineReference"
                                                    },
                                                    "waitOnCompletion": true,
                                                    "parameters": {
                                                        "url": {
                                                            "value": "@pipeline().parameters.logAnalyticsUrl",
                                                            "type": "Expression"
                                                        },
                                                        "message": {
                                                            "value": "@concat(\n    '{\n        \"Message\": \"File is transferred to Hausvise\",',\n        '\"Source\": \"', 'converted-files/', item().name, '\",',\n        '\"Target\": \"', pipeline().parameters.sftpFolder, '/', item().name, '\",', \n        '\"Integration\": \"Mepco\",',\n        '\"Environment\": \"', pipeline().globalParameters.environment, '\"',\n    '}'\n)",
                                                            "type": "Expression"
                                                        },
                                                        "authorizationKey": {
                                                            "value": "@pipeline().parameters.logAnalyticsKey",
                                                            "type": "Expression"
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "If Should Copy to Processed Folder",
                                    "type": "IfCondition",
                                    "dependsOn": [],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@and(\n    equals(item().type, 'File'),\n    pipeline().parameters.copyToProcessedFolder\n)",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Copy files to BizTalk_copy1",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobStorageReadSettings",
                                                            "recursive": true,
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "FileServerWriteSettings"
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "hcintegrations_fa_storage",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "path": "converted-files",
                                                            "filename": {
                                                                "value": "@item().name",
                                                                "type": "Expression"
                                                            },
                                                            "storageUrl": {
                                                                "value": "@concat(\n    'https://',\n    pipeline().globalParameters.environment,\n    'hcintegrationfasa.blob.core.windows.net'\n)",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_hcr_biztalk_dat",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "filename": {
                                                                "value": "@item().name",
                                                                "type": "Expression"
                                                            },
                                                            "path": {
                                                                "value": "@concat(pipeline().parameters.path, '/processed')",
                                                                "type": "Expression"
                                                            },
                                                            "folder": "Integration"
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Send to Hausvise If in Production",
                                    "type": "IfCondition",
                                    "dependsOn": [
                                        {
                                            "activity": "If Should Copy to Processed Folder",
                                            "dependencyConditions": [
                                                "Succeeded"
                                            ]
                                        }
                                    ],
                                    "userProperties": [],
                                    "typeProperties": {
                                        "expression": {
                                            "value": "@equals(toLower(pipeline().globalParameters.environment), 'prod')",
                                            "type": "Expression"
                                        },
                                        "ifTrueActivities": [
                                            {
                                                "name": "Send To Hausvise",
                                                "type": "Copy",
                                                "dependsOn": [],
                                                "policy": {
                                                    "timeout": "0.12:00:00",
                                                    "retry": 0,
                                                    "retryIntervalInSeconds": 30,
                                                    "secureOutput": false,
                                                    "secureInput": false
                                                },
                                                "userProperties": [],
                                                "typeProperties": {
                                                    "source": {
                                                        "type": "DelimitedTextSource",
                                                        "storeSettings": {
                                                            "type": "AzureBlobStorageReadSettings",
                                                            "recursive": true,
                                                            "enablePartitionDiscovery": false
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextReadSettings"
                                                        }
                                                    },
                                                    "sink": {
                                                        "type": "DelimitedTextSink",
                                                        "storeSettings": {
                                                            "type": "SftpWriteSettings",
                                                            "operationTimeout": "01:00:00",
                                                            "useTempFileRename": true
                                                        },
                                                        "formatSettings": {
                                                            "type": "DelimitedTextWriteSettings",
                                                            "quoteAllText": true,
                                                            "fileExtension": ".txt"
                                                        }
                                                    },
                                                    "enableStaging": false,
                                                    "translator": {
                                                        "type": "TabularTranslator",
                                                        "typeConversion": true,
                                                        "typeConversionSettings": {
                                                            "allowDataTruncation": true,
                                                            "treatBooleanAsNumber": false
                                                        }
                                                    }
                                                },
                                                "inputs": [
                                                    {
                                                        "referenceName": "hcintegrations_fa_storage",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "path": "converted-files",
                                                            "filename": {
                                                                "value": "@item().name",
                                                                "type": "Expression"
                                                            },
                                                            "storageUrl": {
                                                                "value": "@concat(\n    'https://',\n    pipeline().globalParameters.environment,\n    'hcintegrationfasa.blob.core.windows.net'\n)",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ],
                                                "outputs": [
                                                    {
                                                        "referenceName": "ds_sftp_hausvise",
                                                        "type": "DatasetReference",
                                                        "parameters": {
                                                            "folder": {
                                                                "value": "@pipeline().parameters.sftpFolder",
                                                                "type": "Expression"
                                                            },
                                                            "filename": {
                                                                "value": "@item().name",
                                                                "type": "Expression"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    }
                ],
                "policy": {
                    "elapsedTimeMetric": {}
                },
                "parameters": {
                    "path": {
                        "type": "string"
                    },
                    "logAnalyticsKey": {
                        "type": "string"
                    },
                    "sftpFolder": {
                        "type": "string"
                    },
                    "copyToProcessedFolder": {
                        "type": "bool"
                    },
                    "logAnalyticsUrl": {
                        "type": "string"
                    }
                },
                "variables": {
                    "Url": {
                        "type": "String"
                    },
                    "tempPath": {
                        "type": "String"
                    },
                    "Conversion": {
                        "type": "String"
                    }
                },
                "folder": {
                    "name": "HCRBizTalkToHausvise"
                },
                "annotations": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/datasets/hcintegrations_fa_storage')]",
                "[concat(variables('factoryId'), '/pipelines/LogToLaws')]",
                "[concat(variables('factoryId'), '/datasets/ds_hcr_biztalk_dat')]",
                "[concat(variables('factoryId'), '/datasets/ds_sftp_hausvise')]",
                "[concat(variables('factoryId'), '/linkedServices/hcintegrations_fa_storage')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Hausvise_Mapping')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Hausvise_Database",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "Server": {
                            "value": "@dataset().Server",
                            "type": "Expression"
                        },
                        "Database": {
                            "value": "@dataset().Database",
                            "type": "Expression"
                        },
                        "UserName": {
                            "value": "@dataset().UserName",
                            "type": "Expression"
                        },
                        "UserPasswordSecret": {
                            "value": "@dataset().UserPasswordSecret",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "Server": {
                        "type": "string"
                    },
                    "Database": {
                        "type": "string"
                    },
                    "UserName": {
                        "type": "string"
                    },
                    "UserPasswordSecret": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [
                    {
                        "name": "PaymentGroup",
                        "type": "varchar"
                    },
                    {
                        "name": "CompanyID",
                        "type": "varchar"
                    },
                    {
                        "name": "Bank",
                        "type": "varchar"
                    },
                    {
                        "name": "CompanyName",
                        "type": "varchar"
                    }
                ],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "Hausvise_mapping"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/Hausvise_Database')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TampuuriDataStore')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "TampuuriReportingDb",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "table_schema": {
                        "type": "string"
                    },
                    "table_name": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().table_schema",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().table_name",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/TampuuriReportingDb')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TampuuriSchemaStore')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "TampuuriReportingDb",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "table_name": {
                        "type": "string"
                    },
                    "schema_name": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "AzureSqlTable",
                "schema": [],
                "typeProperties": {
                    "schema": "dbo",
                    "table": "ImportDataSchema"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/TampuuriReportingDb')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TampuuriTables')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "Tampuuri",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "table_name": {
                        "type": "string",
                        "defaultValue": "tables"
                    },
                    "table_schema": {
                        "type": "string",
                        "defaultValue": "system_information"
                    }
                },
                "annotations": [],
                "type": "SqlServerTable",
                "schema": [],
                "typeProperties": {
                    "schema": {
                        "value": "@dataset().table_schema",
                        "type": "Expression"
                    },
                    "table": {
                        "value": "@dataset().table_name",
                        "type": "Expression"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/Tampuuri')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_data_lake')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "AzureDataLakeStorage1",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "Directory": {
                        "type": "string"
                    },
                    "FileName": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobFSLocation",
                        "fileName": {
                            "value": "@dataset().FileName",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().Directory",
                            "type": "Expression"
                        },
                        "fileSystem": "mepco"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_hcr_biztalk')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "HCRBizTalk",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "directory": {
                        "type": "string"
                    },
                    "file": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "FileServerLocation",
                        "fileName": {
                            "value": "@dataset().file",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/HCRBizTalk')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_hcr_biztalk_dat')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "HCRBizTalk",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "folder": "Integration"
                    }
                },
                "parameters": {
                    "filename": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string",
                        "defaultValue": "Testisiirrot/Hausvise"
                    },
                    "folder": {
                        "type": "string",
                        "defaultValue": "Integration"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "FileServerLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().path",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": "|",
                    "encodingName": "ISO-8859-15",
                    "escapeChar": "\\",
                    "firstRowAsHeader": false,
                    "quoteChar": ""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/HCRBizTalk')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_hcr_biztalk_ocTransfer')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "HCRBizTalk",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "folder": {
                            "value": "@dataset().folder",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "path": {
                        "type": "string"
                    },
                    "file": {
                        "type": "string"
                    },
                    "folder": {
                        "type": "string",
                        "defaultValue": "Integration"
                    }
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "FileServerLocation",
                        "fileName": {
                            "value": "@dataset().file",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().path",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/HCRBizTalk')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_sftp_hausvise')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "HausviseSFTP",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "folder": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().folder",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": "|",
                    "encodingName": "ISO-8859-15",
                    "escapeChar": "\\",
                    "firstRowAsHeader": false,
                    "quoteChar": ""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/HausviseSFTP')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_sftp_mepco')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "MepcoSFTP",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "file": {
                        "type": "string",
                        "defaultValue": "*"
                    },
                    "directory": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().file",
                            "type": "Expression"
                        },
                        "folderPath": {
                            "value": "@dataset().directory",
                            "type": "Expression"
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/MepcoSFTP')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_sftp_opus_capita')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "OpusCapita",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "file": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().file",
                            "type": "Expression"
                        },
                        "folderPath": "/in/paymentshub"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/OpusCapita')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/ds_sftp_sirius')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "SiriusSftp",
                    "type": "LinkedServiceReference"
                },
                "parameters": {
                    "file": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "Binary",
                "typeProperties": {
                    "location": {
                        "type": "SftpLocation",
                        "fileName": {
                            "value": "@dataset().file",
                            "type": "Expression"
                        },
                        "folderPath": "/upload"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/SiriusSftp')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/hcintegrations_fa_storage')]",
            "type": "Microsoft.DataFactory/factories/datasets",
            "apiVersion": "2018-06-01",
            "properties": {
                "linkedServiceName": {
                    "referenceName": "hcintegrations_fa_storage",
                    "type": "LinkedServiceReference",
                    "parameters": {
                        "StorageUrl": {
                            "value": "@dataset().storageUrl",
                            "type": "Expression"
                        }
                    }
                },
                "parameters": {
                    "path": {
                        "type": "string"
                    },
                    "filename": {
                        "type": "string"
                    },
                    "storageUrl": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "DelimitedText",
                "typeProperties": {
                    "location": {
                        "type": "AzureBlobStorageLocation",
                        "fileName": {
                            "value": "@dataset().filename",
                            "type": "Expression"
                        },
                        "container": {
                            "value": "@dataset().path",
                            "type": "Expression"
                        }
                    },
                    "columnDelimiter": "|",
                    "encodingName": "ISO-8859-15",
                    "escapeChar": "\\",
                    "firstRowAsHeader": false,
                    "quoteChar": ""
                },
                "schema": []
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/hcintegrations_fa_storage')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureBlobFS",
                "typeProperties": {
                    "url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]"
                },
                "connectVia": {
                    "referenceName": "shared-dataplatformir",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/shared-dataplatformir')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/HCRBizTalk')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "folder": {
                        "type": "string",
                        "defaultValue": "Integration"
                    }
                },
                "annotations": [],
                "type": "FileServer",
                "typeProperties": {
                    "host": "[parameters('HCRBizTalk_properties_typeProperties_host')]",
                    "userId": "[parameters('HCRBizTalk_properties_typeProperties_userId')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "IntegrationKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "HCRTestUserPassword"
                    }
                },
                "connectVia": {
                    "referenceName": "shared-dataplatformir",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/shared-dataplatformir')]",
                "[concat(variables('factoryId'), '/linkedServices/IntegrationKeyVault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/HausviseSFTP')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "Sftp",
                "typeProperties": {
                    "host": "[parameters('HausviseSFTP_properties_typeProperties_host')]",
                    "port": 22,
                    "skipHostKeyValidation": true,
                    "authenticationType": "Basic",
                    "userName": "[parameters('HausviseSFTP_properties_typeProperties_userName')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "IntegrationKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "HausviseSFTPPassword"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/linkedServices/IntegrationKeyVault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Hausvise_Database')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "Server": {
                        "type": "string"
                    },
                    "Database": {
                        "type": "string"
                    },
                    "UserName": {
                        "type": "string"
                    },
                    "UserPasswordSecret": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "server": "[parameters('Hausvise_Database_properties_typeProperties_server')]",
                    "database": "[parameters('Hausvise_Database_properties_typeProperties_database')]",
                    "encrypt": "optional",
                    "trustServerCertificate": true,
                    "authenticationType": "Windows",
                    "userName": "[parameters('Hausvise_Database_properties_typeProperties_userName')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "IntegrationKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": {
                            "value": "@linkedService().UserPasswordSecret",
                            "type": "Expression"
                        }
                    }
                },
                "connectVia": {
                    "referenceName": "shared-dataplatformir",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/shared-dataplatformir')]",
                "[concat(variables('factoryId'), '/linkedServices/IntegrationKeyVault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/IntegrationKeyVault')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureKeyVault",
                "typeProperties": {
                    "baseUrl": "[parameters('IntegrationKeyVault_properties_typeProperties_baseUrl')]"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/MepcoSFTP')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "Sftp",
                "typeProperties": {
                    "host": "[parameters('MepcoSFTP_properties_typeProperties_host')]",
                    "port": 22,
                    "skipHostKeyValidation": true,
                    "authenticationType": "SshPublicKey",
                    "userName": "[parameters('MepcoSFTP_properties_typeProperties_userName')]",
                    "privateKeyContent": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "IntegrationKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "MepcoPrivateKeySFTP"
                    },
                    "passPhrase": {
                        "type": "SecureString",
                        "value": "[parameters('MepcoSFTP_passPhrase')]"
                    }
                },
                "connectVia": {
                    "referenceName": "shared-dataplatformir",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/shared-dataplatformir')]",
                "[concat(variables('factoryId'), '/linkedServices/IntegrationKeyVault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/OpusCapita')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "Sftp",
                "typeProperties": {
                    "host": "[parameters('OpusCapita_properties_typeProperties_host')]",
                    "port": 22,
                    "skipHostKeyValidation": true,
                    "authenticationType": "Basic",
                    "userName": "[parameters('OpusCapita_properties_typeProperties_userName')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "IntegrationKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "OpusCapitaSFTPPassword"
                    }
                },
                "connectVia": {
                    "referenceName": "shared-dataplatformir",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/shared-dataplatformir')]",
                "[concat(variables('factoryId'), '/linkedServices/IntegrationKeyVault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SiriusSftp')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "Sftp",
                "typeProperties": {
                    "host": "[parameters('SiriusSftp_properties_typeProperties_host')]",
                    "port": 22,
                    "skipHostKeyValidation": true,
                    "authenticationType": "Basic",
                    "userName": "[parameters('SiriusSftp_properties_typeProperties_userName')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "IntegrationKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "SiriusSFTPPassword"
                    }
                },
                "connectVia": {
                    "referenceName": "shared-dataplatformir",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/shared-dataplatformir')]",
                "[concat(variables('factoryId'), '/linkedServices/IntegrationKeyVault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/SpiDbTest')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "server": "[parameters('SpiDbTest_properties_typeProperties_server')]",
                    "database": "[parameters('SpiDbTest_properties_typeProperties_database')]",
                    "encrypt": "optional",
                    "trustServerCertificate": true,
                    "authenticationType": "Windows",
                    "userName": "[parameters('SpiDbTest_properties_typeProperties_userName')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "IntegrationKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "HCRTestUserPassword"
                    }
                },
                "connectVia": {
                    "referenceName": "shared-dataplatformir",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/shared-dataplatformir')]",
                "[concat(variables('factoryId'), '/linkedServices/IntegrationKeyVault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/Tampuuri')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "SqlServer",
                "typeProperties": {
                    "connectionString": "[parameters('Tampuuri_connectionString')]",
                    "password": {
                        "type": "AzureKeyVaultSecret",
                        "store": {
                            "referenceName": "IntegrationKeyVault",
                            "type": "LinkedServiceReference"
                        },
                        "secretName": "TampuuriPassword"
                    }
                },
                "connectVia": {
                    "referenceName": "shared-dataplatformir",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/shared-dataplatformir')]",
                "[concat(variables('factoryId'), '/linkedServices/IntegrationKeyVault')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TampuuriReportingDb')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "type": "AzureSqlDatabase",
                "typeProperties": {
                    "connectionString": "[parameters('TampuuriReportingDb_connectionString')]"
                },
                "connectVia": {
                    "referenceName": "shared-dataplatformir",
                    "type": "IntegrationRuntimeReference"
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/integrationRuntimes/shared-dataplatformir')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/hcintegrations_fa_storage')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
                "parameters": {
                    "StorageUrl": {
                        "type": "string"
                    }
                },
                "annotations": [],
                "type": "AzureBlobStorage",
                "typeProperties": {
                    "serviceEndpoint": "[parameters('hcintegrations_fa_storage_properties_typeProperties_serviceEndpoint')]",
                    "accountKind": "StorageV2"
                }
            },
            "dependsOn": []
        },
        {
            "name": "[concat(parameters('factoryName'), '/TriggerHCRBizTalk10MinInterval')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "CopyAllFilesFromMepcoToHCRBizTalk",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "inputParam": "[parameters('TriggerHCRBizTalk10MinInterval_properties_CopyAllFilesFromMepcoToHCRBizTalk_parameters_inputParam')]",
                            "deleteConfig": "[parameters('TriggerHCRBizTalk10MinInterval_properties_CopyAllFilesFromMepcoToHCRBizTalk_parameters_deleteConfig')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Minute",
                        "interval": 10,
                        "startTime": "2022-10-19T05:20:00Z",
                        "timeZone": "UTC"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/CopyAllFilesFromMepcoToHCRBizTalk')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TriggerOpusCapita10MinInterval')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "CopyAllFilesFromMepcoToOpusCapita",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "inputParam": "[parameters('TriggerOpusCapita10MinInterval_properties_CopyAllFilesFromMepcoToOpusCapita_parameters_inputParam')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Minute",
                        "interval": 10,
                        "startTime": "2022-10-19T05:35:00Z",
                        "timeZone": "UTC"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/CopyAllFilesFromMepcoToOpusCapita')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TriggerSiriusEveryDayAt0200')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "annotations": [],
                "runtimeState": "Stopped",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "CopyAllFilesFromMepcoToSirius",
                            "type": "PipelineReference"
                        },
                        "parameters": {
                            "inputParam": "[parameters('TriggerSiriusEveryDayAt0200_properties_CopyAllFilesFromMepcoToSirius_parameters_inputParam')]"
                        }
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2022-10-19T02:00:00",
                        "timeZone": "FLE Standard Time"
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/CopyAllFilesFromMepcoToSirius')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/TriggerTampuuriDataImportEveryDayAt0930')]",
            "type": "Microsoft.DataFactory/factories/triggers",
            "apiVersion": "2018-06-01",
            "properties": {
                "description": "Runs the pipeline that gets data from source Tampuuri databases and truncates tables if they exist before inserting to Tampuuri reporting database",
                "annotations": [],
                "runtimeState": "Started",
                "pipelines": [
                    {
                        "pipelineReference": {
                            "referenceName": "RefreshSchemasAndCopyData",
                            "type": "PipelineReference"
                        },
                        "parameters": {}
                    }
                ],
                "type": "ScheduleTrigger",
                "typeProperties": {
                    "recurrence": {
                        "frequency": "Day",
                        "interval": 1,
                        "startTime": "2024-02-14T14:46:00",
                        "timeZone": "FLE Standard Time",
                        "schedule": {
                            "minutes": [
                                30
                            ],
                            "hours": [
                                9
                            ]
                        }
                    }
                }
            },
            "dependsOn": [
                "[concat(variables('factoryId'), '/pipelines/RefreshSchemasAndCopyData')]"
            ]
        },
        {
            "name": "[concat(parameters('factoryName'), '/shared-dataplatformir')]",
            "type": "Microsoft.DataFactory/factories/integrationRuntimes",
            "apiVersion": "2018-06-01",
            "properties": {
                "type": "SelfHosted",
                "typeProperties": {
                    "linkedInfo": {
                        "resourceId": "[parameters('shared-dataplatformir_properties_typeProperties_linkedInfo_resourceId')]",
                        "authorizationType": "Rbac"
                    }
                }
            },
            "dependsOn": []
        }
    ]
}